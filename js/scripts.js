document.addEventListener('DOMContentLoaded', () => {
    let currentPage = 1;
    let isSearching = false; // Ki·ªÉm tra tr·∫°ng th√°i t√¨m ki·∫øm
    let searchKeyword = ''; // L∆∞u t·ª´ kh√≥a t√¨m ki·∫øm

    const filmContainer = document.getElementById('film-container');
    const searchInput = document.getElementById('search-input');
    const backToTopButton = document.getElementById('back-to-top');
    const toggleBtn = document.getElementById('toggle-theme-btn');
    const prevBtns = document.querySelectorAll('#previous, #previous-bottom');
    const nextBtns = document.querySelectorAll('#next, #next-bottom');
    const goToPageBtns = document.querySelectorAll('#goToPage, #goToPage-bottom');

    const tmdbApiKey = 'fe149ef5184995f0ce33134201fb0c3d';

    /** üìå H√†m g·ªçi API l·∫•y danh s√°ch phim **/
    const fetchFilms = async (url) => {
        try {
            const response = await axios.get(url);
            return response.status === 200 ? response.data.items : [];
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i phim:", error);
            return [];
        }
    };

    /** üìå H√†m t√¨m ƒëi·ªÉm ƒë√°nh gi√° tr√™n TMDB **/
    const getTmdbRating = async (originalName) => {
        try {
            if (!originalName) return 'N/A';
            const searchUrl = `https://api.themoviedb.org/3/search/tv?api_key=${tmdbApiKey}&query=${encodeURIComponent(originalName)}`;
            const response = await axios.get(searchUrl);
            const movies = response.data.results;
            return movies.length ? movies[0].vote_average.toFixed(1) : 'Ch∆∞a c√≥ ƒë√°nh gi√°';
        } catch (error) {
            console.error(`‚ùå L·ªói khi l·∫•y ƒëi·ªÉm ƒë√°nh gi√° TMDB cho phim: ${originalName}`, error);
            return 'N/A';
        }
    };

    /** üìå H√†m t·∫£i phim theo trang (K·∫øt h·ª£p v·ªõi ƒëi·ªÉm TMDB) **/
    const loadFilms = async (page) => {
        if (!filmContainer) return;
        filmContainer.innerHTML = '<h1 class="not-found">‚è≥ ƒêang t·∫£i phim...</h1>';

        const films = await fetchFilms(`https://phim.nguonc.com/api/films/phim-moi-cap-nhat?page=${page}`);

        if (films.length === 0) {
            filmContainer.innerHTML = '<p class="not-found">‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y phim n√†o.</p>';
            return;
        }

        let filmHTML = '';

        for (const film of films) {
            const rating = await getTmdbRating(film.original_name); // L·∫•y ƒëi·ªÉm t·ª´ TMDB

            filmHTML += `
                <div class="film-card">
                    <a href="film-details.html?slug=${film.slug}" class="details-link">
                        <img src="${film.thumb_url}" alt="${film.original_name}" class="film-image">
                        <h2>${film.name}</h2>
                        <p><strong>T·ªïng s·ªë t·∫≠p:</strong> ${film.total_episodes || 'Ch∆∞a r√µ'}</p>
                        <p><strong>T·∫≠p hi·ªán t·∫°i:</strong> ${film.current_episode || 'Ch∆∞a r√µ'}</p>
                        <p><strong>ƒê·∫°o di·ªÖn:</strong> ${film.director || 'Kh√¥ng r√µ'}</p>
                        <p><strong>D√†n di·ªÖn vi√™n:</strong> ${film.casts || 'Kh√¥ng r√µ'}</p>
                        <p><strong>ƒêi·ªÉm ƒë√°nh gi√°:</strong> ‚≠ê ${rating}/10</p>
                    </a>
                </div>`;
        }

        filmContainer.innerHTML = filmHTML;

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c n√∫t ph√¢n trang
        prevBtns.forEach(btn => btn.disabled = page === 1);
        nextBtns.forEach(btn => btn.disabled = films.length < 10);
    };

    /** üìå H√†m t√¨m ki·∫øm phim (K·∫øt h·ª£p v·ªõi TMDB) **/
    const searchMovies = async (isPagination = false) => {
        if (!isPagination) {
            searchKeyword = searchInput.value.trim();
            if (!searchKeyword) return alert("üîç Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm.");
            currentPage = 1; // Reset v·ªÅ trang ƒë·∫ßu khi t√¨m ki·∫øm m·ªõi
        }

        isSearching = true; // ƒê√°nh d·∫•u tr·∫°ng th√°i t√¨m ki·∫øm
        filmContainer.innerHTML = '<p class="not-found">‚è≥ ƒêang t√¨m ki·∫øm...</p>';
        const films = await fetchFilms(`https://phim.nguonc.com/api/films/search?keyword=${encodeURIComponent(searchKeyword)}&page=${currentPage}`);

        if (films.length === 0) {
            filmContainer.innerHTML = '<h1 class="not-found">‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.</h1>';
            return;
        }

        let filmHTML = '';

        for (const film of films) {
            const rating = await getTmdbRating(film.original_name); // L·∫•y ƒëi·ªÉm t·ª´ TMDB

            filmHTML += `
                <div class="film-card">
                    <a href="film-details.html?slug=${film.slug}" class="details-link">
                        <img src="${film.thumb_url}" alt="${film.original_name}" class="film-image">
                        <h2>${film.name}</h2>
                        <p><strong>T·ªïng s·ªë t·∫≠p:</strong> ${film.total_episodes || 'Ch∆∞a c√≥ th√¥ng tin'}</p>
                        <p><strong>T·∫≠p hi·ªán t·∫°i:</strong> ${film.current_episode || 'Ch∆∞a c√≥ th√¥ng tin'}</p>
                        <p><strong>ƒêi·ªÉm TMDB:</strong> ‚≠ê ${rating}/10</p>
                    </a>
                </div>`;
        }

        filmContainer.innerHTML = filmHTML;

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c n√∫t ph√¢n trang
        prevBtns.forEach(btn => btn.disabled = currentPage === 1);
        nextBtns.forEach(btn => btn.disabled = films.length < 10);
    };

    /** üìå H√†m ƒëi·ªÅu h∆∞·ªõng trang **/
    const handlePagination = (action) => {
        const pageInput = document.getElementById('pageInput');
        if (action === 'next') currentPage++;
        else if (action === 'prev' && currentPage > 1) currentPage--;
        else if (action === 'goTo' && pageInput) {
            const targetPage = parseInt(pageInput.value);
            if (!isNaN(targetPage) && targetPage >= 1) currentPage = targetPage;
            else return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë trang h·ª£p l·ªá!");
        }

        if (isSearching) {
            searchMovies(true); // G·ªçi l·∫°i t√¨m ki·∫øm nh∆∞ng gi·ªØ nguy√™n t·ª´ kh√≥a
        } else {
            loadFilms(currentPage);
        }
    };

    /** üìå H√†m b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô s√°ng/t·ªëi **/
    const toggleTheme = () => {
        document.body.classList.toggle('light-theme');
        localStorage.setItem('theme', document.body.classList.contains('light-theme') ? 'light' : 'dark');
        toggleBtn.textContent = document.body.classList.contains('light-theme') ? 'üåû' : 'üåô';
    };

    /** üìå C√†i ƒë·∫∑t c√°c s·ª± ki·ªán **/
    const setupEventListeners = () => {
        prevBtns.forEach(btn => btn.addEventListener('click', () => handlePagination('prev')));
        nextBtns.forEach(btn => btn.addEventListener('click', () => handlePagination('next')));
        goToPageBtns.forEach(btn => btn.addEventListener('click', () => handlePagination('goTo')));

        document.getElementById('search-button')?.addEventListener('click', searchMovies);
        document.getElementById('toggle-theme-btn')?.addEventListener('click', toggleTheme);
        document.getElementById('toggle-nav')?.addEventListener('click', () => {
            document.querySelector('.nav-links')?.classList.toggle('active');
        });

        searchInput?.addEventListener('keypress', event => {
            if (event.key === 'Enter') searchMovies();
        });

        if (backToTopButton) {
            backToTopButton.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
        }
    };

    /** üìå Kh·ªüi ch·∫°y ·ª©ng d·ª•ng **/
    const init = () => {
        setupEventListeners();
        loadFilms(currentPage);
    };

    init();
});
